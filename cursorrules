# Cursor Rules - Regu≈Çy pracy w projekcie YouTube Downloader

## üéØ G≈Å√ìWNA REGU≈ÅA: PRACA TYLKO W KATALOGU PROJEKTU

### ‚úÖ OBOWIƒÑZKOWE KROKI PRZED KA≈ªDƒÑ PRACƒÑ:
1. **Sprawd≈∫ katalog roboczy:** `pwd`
2. **Sprawd≈∫ zawarto≈õƒá:** `ls -la`
3. **Upewnij siƒô, ≈ºe jeste≈õ w katalogu projektu:** `youtube-downloader/`
4. **Dopiero potem tw√≥rz/edytuj pliki**

### üö´ ZAKAZANE:
- Tworzenie plik√≥w poza katalogiem projektu
- Edytowanie plik√≥w w katalogu nadrzƒôdnym
- Praca w innych katalogach bez weryfikacji

### ‚úÖ DOZWOLONE:
- Praca tylko w katalogu `youtube-downloader/`
- Tworzenie plik√≥w tylko w tym katalogu
- Edytowanie plik√≥w tylko w tym katalogu

### üîç WERYFIKACJA:
Przed ka≈ºdƒÖ operacjƒÖ sprawd≈∫:
```bash
pwd && ls -la
```

**Sprawd≈∫ czy jeste≈õ w katalogu projektu:**
- ‚úÖ Powinno byƒá: `youtube-downloader/` na ko≈Ñcu ≈õcie≈ºki
- ‚úÖ Powinny byƒá pliki: `main.py`, `gui.py`, `debian/`, `README.md`
- ‚ùå Nie powinno byƒá: `../youtube-downloader` lub inne katalogi

### üìÅ STRUKTURA PROJEKTU:
```
youtube-downloader/
‚îú‚îÄ‚îÄ main.py            # G≈Ç√≥wna aplikacja
‚îú‚îÄ‚îÄ gui.py             # Interfejs u≈ºytkownika
‚îú‚îÄ‚îÄ downloader.py      # Logika pobierania
‚îú‚îÄ‚îÄ utils.py           # Funkcje pomocnicze
‚îú‚îÄ‚îÄ README.md          # Dokumentacja
‚îú‚îÄ‚îÄ cursorrules        # Regu≈Çy projektu
‚îú‚îÄ‚îÄ debian/            # Skrypty pakietu DEB
‚îÇ   ‚îú‚îÄ‚îÄ control        # Metadane pakietu
‚îÇ   ‚îú‚îÄ‚îÄ postinst       # Skrypt instalacji
‚îÇ   ‚îú‚îÄ‚îÄ postrm         # Skrypt deinstalacji
‚îÇ   ‚îú‚îÄ‚îÄ prerm          # Skrypt przed usuniƒôciem
‚îÇ   ‚îî‚îÄ‚îÄ rules          # Regu≈Çy budowania
‚îú‚îÄ‚îÄ pics/              # Zasoby graficzne
‚îú‚îÄ‚îÄ *.deb              # Pliki pakiet√≥w (prywatne repo)
‚îî‚îÄ‚îÄ .gitignore         # Pliki ignorowane przez Git
```

### üéØ CEL:
Wszystkie pliki aplikacji muszƒÖ byƒá w katalogu `youtube-downloader/` 

### üîí GIT - ZGODA PRZED AKTUALIZACJƒÑ:
**OBOWIƒÑZKOWE:** Przed ka≈ºdƒÖ aktualizacjƒÖ danych do Git (commit, push) musisz:
1. **Zapytaƒá u≈ºytkownika o zgodƒô** - "Czy mogƒô zaktualizowaƒá dane w Git?"
2. **Poczekaƒá na odpowied≈∫** - nie r√≥b commit/push bez zgody
3. **Opisaƒá co zostanie zmienione** - powiedz co dok≈Çadnie zostanie zaktualizowane
4. **Dopiero po zgodzie** - wykonaj operacje Git

### ‚ùå ZAKAZANE W GIT:
- Commit bez pytania o zgodƒô
- Push bez pytania o zgodƒô
- Automatyczne aktualizacje bez zgody u≈ºytkownika
- Force push bez wyra≈∫nej zgody

### ‚úÖ DOZWOLONE W GIT:
- Sprawdzanie statusu: `git status`
- PodglƒÖd zmian: `git diff`
- Pytanie o zgodƒô przed commit/push
- Wykonywanie operacji tylko po otrzymaniu zgody

## üèóÔ∏è BUDOWANIE PAKIET√ìW DEB

### ‚úÖ PRAKTYKA BUDOWANIA PAKIET√ìW:
1. **Sprawd≈∫ gotowo≈õƒá systemu** - python3-venv, python3-tk, pip
2. **U≈ºyj curl jako fallback** - je≈õli ensurepip nie dzia≈Ça
3. **Instalacja w tle** - dla brakujƒÖcych pakiet√≥w systemowych
4. **Sprawdzanie zale≈ºno≈õci** - weryfikacja po instalacji
5. **Alternatywne metody** - rƒôczne tworzenie venv je≈õli standardowe nie dzia≈Ça

### üîß KLUCZOWE ELEMENTY SKRYPT√ìW DEB:

#### **debian/postinst - Sprawdzanie gotowo≈õci:**
```bash
# Sprawd≈∫ czy system jest gotowy do tworzenia venv
echo "üîç Sprawdzanie gotowo≈õci systemu..."

# Sprawd≈∫ czy venv jest dostƒôpny
if ! python3 -c "import venv" 2>/dev/null; then
    echo "‚ö†Ô∏è python3-venv nie jest dostƒôpny"
    echo "Instalowanie w tle..."
    nohup bash -c 'sleep 5; apt-get update && apt-get install -y python3-venv' >/dev/null 2>&1 &
fi

# Sprawd≈∫ czy tkinter jest dostƒôpny
if ! python3 -c "import tkinter" 2>/dev/null; then
    echo "‚ö†Ô∏è python3-tk nie jest dostƒôpny"
    echo "Instalowanie w tle..."
    nohup bash -c 'sleep 5; apt-get update && apt-get install -y python3-tk' >/dev/null 2>&1 &
fi

# Sprawd≈∫ czy pip jest dostƒôpny
if ! python3 -c "import pip" 2>/dev/null; then
    echo "‚ö†Ô∏è pip nie jest dostƒôpny"
    echo "Instalowanie pip przez curl..."
    curl https://bootstrap.pypa.io/get-pip.py | python3
fi
```

#### **debian/postinst - Tworzenie venv z fallback:**
```bash
# Pr√≥buj standardowƒÖ metodƒô
if python3 -m venv /usr/share/youtube-downloader/venv 2>/dev/null; then
    echo "‚úÖ ≈örodowisko wirtualne utworzone pomy≈õlnie"
else
    echo "‚ùå B≈ÇƒÖd: Nie uda≈Ço siƒô utworzyƒá ≈õrodowiska wirtualnego"
    echo "Pr√≥bujƒô alternatywnƒÖ metodƒô..."
    
    # Usu≈Ñ uszkodzone venv je≈õli istnieje
    rm -rf /usr/share/youtube-downloader/venv 2>/dev/null || true
    
    # Pr√≥buj z --without-pip
    if python3 -m venv --without-pip /usr/share/youtube-downloader/venv 2>/dev/null; then
        echo "‚úÖ ≈örodowisko wirtualne utworzone bez pip"
        # Zainstaluj pip w venv przez curl
        curl https://bootstrap.pypa.io/get-pip.py | /usr/share/youtube-downloader/venv/bin/python
    else
        echo "‚ùå B≈ÇƒÖd: Nie uda≈Ço siƒô utworzyƒá ≈õrodowiska wirtualnego"
        echo "Pr√≥bujƒô rƒôcznƒÖ metodƒô..."
        
        # Rƒôczne utworzenie venv
        mkdir -p /usr/share/youtube-downloader/venv/bin
        mkdir -p /usr/share/youtube-downloader/venv/lib/python3.*/site-packages
        mkdir -p /usr/share/youtube-downloader/venv/include
        
        # Skopiuj Python do venv
        cp $(which python3) /usr/share/youtube-downloader/venv/bin/python
        cp $(which python3) /usr/share/youtube-downloader/venv/bin/python3
        
        # Utw√≥rz activate script
        cat > /usr/share/youtube-downloader/venv/bin/activate << 'EOF'
#!/bin/bash
export VIRTUAL_ENV="/usr/share/youtube-downloader/venv"
export PATH="$VIRTUAL_ENV/bin:$PATH"
unset PYTHONHOME
EOF
        chmod +x /usr/share/youtube-downloader/venv/bin/activate
        
        # Zainstaluj pip przez curl
        curl https://bootstrap.pypa.io/get-pip.py | /usr/share/youtube-downloader/venv/bin/python
    fi
fi
```

#### **debian/postinst - Instalacja zale≈ºno≈õci:**
```bash
# Zainstaluj zale≈ºno≈õci w ≈õrodowisku wirtualnym
echo "üìö Instalowanie zale≈ºno≈õci w ≈õrodowisku wirtualnym..."
if /usr/share/youtube-downloader/venv/bin/pip install yt-dlp 2>/dev/null; then
    echo "‚úÖ Zale≈ºno≈õci zainstalowane pomy≈õlnie"
else
    echo "‚ùå B≈ÇƒÖd: Nie uda≈Ço siƒô zainstalowaƒá zale≈ºno≈õci"
    echo "Instalowanie w tle..."
    nohup bash -c 'sleep 10; /usr/share/youtube-downloader/venv/bin/pip install yt-dlp' >/dev/null 2>&1 &
fi

# Sprawd≈∫ czy zale≈ºno≈õci zosta≈Çy zainstalowane poprawnie
echo "üîç Sprawdzanie instalacji zale≈ºno≈õci..."
if /usr/share/youtube-downloader/venv/bin/python -c "import yt_dlp" 2>/dev/null; then
    echo "‚úÖ Zale≈ºno≈õci dzia≈ÇajƒÖ poprawnie"
else
    echo "‚ùå B≈ÇƒÖd: Zale≈ºno≈õci nie dzia≈ÇajƒÖ poprawnie"
    echo "Instalowanie w tle..."
    nohup bash -c 'sleep 10; /usr/share/youtube-downloader/venv/bin/pip install yt-dlp' >/dev/null 2>&1 &
fi
```

### üö´ PROBLEMY DO UNIKANIA:
- **Blokady dpkg** - u≈ºywaj instalacji w tle z `nohup`
- **Brak ensurepip** - u≈ºywaj curl jako fallback
- **Brak pip w venv** - instaluj przez curl
- **Brak zale≈ºno≈õci systemowych** - sprawdzaj przed tworzeniem venv

### ‚úÖ DOBRE PRAKTYKI:
- **Sprawdzanie gotowo≈õci** - przed tworzeniem venv
- **Instalacja w tle** - dla pakiet√≥w systemowych
- **Fallback z curl** - dla pip i ensurepip
- **Weryfikacja zale≈ºno≈õci** - po instalacji
- **Alternatywne metody** - je≈õli standardowe nie dzia≈ÇajƒÖ

### üîÑ PROCEDURA BUDOWANIA I TESTOWANIA:
```bash
# 1. Przygotuj pliki DEB
sudo dpkg-buildpackage -b -us -uc

# 2. Przenie≈õ pliki do katalogu projektu
mv ../youtube-downloader_* . -f

# 3. Testuj instalacjƒô
sudo dpkg -i youtube-downloader_*.deb

# 4. Testuj aplikacjƒô
youtube-downloader

# 5. Deinstaluj do test√≥w
sudo dpkg --purge youtube-downloader
```

## üì§ ZASADY WYPYCHANIA DO REPOZYTORI√ìW

### üéØ **DWA REPOZYTORIA:**

#### **1. PUBLICZNE REPO (origin)**
- **URL:** https://github.com/george7979/youtube-downloader
- **Cel:** Kod ≈∫r√≥d≈Çowy dla spo≈Çeczno≈õci
- **Zawarto≈õƒá:** Kod Python, skrypty Debian, dokumentacja
- **NIE zawiera:** Pliki DEB, buildinfo, changes

#### **2. PRYWATNE REPO (private)**
- **URL:** https://github.com/george7979/youtube-downloader-private
- **Cel:** Pe≈Çny projekt roboczy
- **Zawarto≈õƒá:** Wszystko + pliki DEB, buildinfo, changes

### üìã **ZASADY WYPYCHANIA:**

#### **Do publicznego repo (origin):**
```bash
# 1. Dodaj zmiany (automatycznie ignoruje pliki DEB)
git add .

# 2. Commit
git commit -m "Opis zmian"

# 3. Push do publicznego
git push origin master
```

#### **Do prywatnego repo (private):**
```bash
# 1. Dodaj zmiany
git add .

# 2. Dodaj pliki DEB (force add - ignoruje .gitignore)
git add -f *.deb *.buildinfo *.changes cursorrules

# 3. Commit
git commit -m "Opis zmian + pliki DEB"

# 4. Push do prywatnego
git push private master
```

### üîÑ **PRACA Z DWOMA REPO:**

#### **Nowa funkcja:**
```bash
# 1. Rozwij funkcjƒô
# 2. Testuj
# 3. Zbuduj i przetestuj DEB (patrz: PROCEDURA BUDOWANIA I TESTOWANIA)
sudo dpkg-buildpackage -b -us -uc
mv ../youtube-downloader_* .

# 4. Push do prywatnego (z DEB)
git add .
git add -f *.deb *.buildinfo *.changes cursorrules
git commit -m "Nowa funkcja + DEB"
git push private master

# 5. Push do publicznego (bez DEB - automatycznie)
git add .
git commit -m "Nowa funkcja"
git push origin master
```

#### **Aktualizacja .gitignore:**
```bash
# 1. Edytuj .gitignore
# 2. Push do obu repo
git add .gitignore
git commit -m "Aktualizacja .gitignore"
git push origin master
git push private master
```

#### **Wa≈ºne zasady .gitignore:**
- **Pliki DEB:** `*.deb`, `*.buildinfo`, `*.changes` - tylko w prywatnym repo
- **Cursor rules:** `cursorrules` - tylko w prywatnym repo
- **Automatyczna ochrona:** .gitignore chroni publiczne repo
- **Force add:** `git add -f` dla plik√≥w ignorowanych w prywatnym repo

### ‚ö†Ô∏è **WA≈ªNE ZASADY:**
- **Publiczne repo:** Tylko kod ≈∫r√≥d≈Çowy (automatycznie chronione przez .gitignore)
- **Prywatne repo:** Wszystko + artefakty budowania (force add dla ignorowanych plik√≥w)
- **Zawsze pytaj:** Przed push do publicznego repo
- **Testuj:** Przed push do publicznego repo
- **Dokumentuj:** Zmiany w cursorrules
- **Force add:** U≈ºywaj `git add -f` dla plik√≥w DEB w prywatnym repo

### üìã STRUKTURA PAKIETU DEB:
```
youtube-downloader_1.0.2_all.deb
‚îú‚îÄ‚îÄ DEBIAN/
‚îÇ   ‚îú‚îÄ‚îÄ control (zale≈ºno≈õci: python3 | python3-minimal, python3-tk)
‚îÇ   ‚îú‚îÄ‚îÄ postinst (sprawdzanie + instalacja w tle)
‚îÇ   ‚îú‚îÄ‚îÄ postrm (czysta deinstalacja)
‚îÇ   ‚îî‚îÄ‚îÄ prerm (usuwanie venv)
‚îú‚îÄ‚îÄ usr/bin/youtube-downloader (skrypt uruchamiajƒÖcy)
‚îú‚îÄ‚îÄ usr/share/applications/youtube-downloader.desktop
‚îú‚îÄ‚îÄ usr/share/icons/.../youtube-downloader.png
‚îî‚îÄ‚îÄ usr/share/youtube-downloader/ (pliki aplikacji)
```