#!/bin/bash
# YouTube Downloader - Post-installation script
# Autor: george7979

# Bezpieczna funkcja curl z weryfikacją SSL
secure_curl() {
    local url="$1"
    local output="$2"
    
    # Sprawdź czy curl jest dostępny
    if ! command -v curl >/dev/null 2>&1; then
        echo "❌ Błąd: curl nie jest dostępny"
        return 1
    fi
    
    # Sprawdź czy certyfikaty SSL są dostępne
    if [ ! -f "/etc/ssl/certs/ca-certificates.crt" ]; then
        echo "❌ Błąd: Certyfikaty SSL nie są dostępne"
        return 1
    fi
    
    # Bezpieczne pobieranie z curl z timeout
    if [ -n "$output" ]; then
        curl --tlsv1.2 --proto '=https' --fail --silent --show-error \
            --connect-timeout 10 --max-time 60 \
            --cacert /etc/ssl/certs/ca-certificates.crt \
            --output "$output" "$url"
    else
        curl --tlsv1.2 --proto '=https' --fail --silent --show-error \
            --connect-timeout 10 --max-time 60 \
            --cacert /etc/ssl/certs/ca-certificates.crt \
            "$url"
    fi
    
    return $?
}

# Funkcja do bezpiecznego pobierania pip
install_pip_secure() {
    local python_cmd="$1"
    
    echo "🔒 Bezpieczne pobieranie pip..."
    
    # Utwórz tymczasowy plik
    local temp_file=$(mktemp)
    
    # Pobierz pip z weryfikacją SSL
    if secure_curl "https://bootstrap.pypa.io/get-pip.py" "$temp_file"; then
        # Sprawdź czy plik został pobrany poprawnie
        if [ -s "$temp_file" ] && grep -q "import sys" "$temp_file"; then
            echo "✅ Pip pobrany bezpiecznie"
            # Wykonaj pobrany skrypt
            "$python_cmd" "$temp_file"
            local result=$?
            rm -f "$temp_file"
            return $result
        else
            echo "❌ Błąd: Pobrany plik pip jest nieprawidłowy"
            rm -f "$temp_file"
            return 1
        fi
    else
        echo "❌ Błąd: Nie udało się pobrać pip bezpiecznie"
        rm -f "$temp_file"
        return 1
    fi
}

echo "🎬 YouTube Downloader - Instalacja"
echo "=================================="

# Funkcja usunięta - wait_for_dpkg powodowała deadlock podczas instalacji pakietu

# Sprawdzenie zależności - powinny być już zainstalowane przez dpkg
echo "🔍 Weryfikacja zależności..."

if ! command -v python3 >/dev/null 2>&1; then
    echo "❌ Błąd: Python3 nie jest dostępny"
    echo "💡 To nie powinno się zdarzyć - zależności powinny być zainstalowane automatycznie"
    exit 1
fi

if ! python3 -c "import venv" 2>/dev/null; then
    echo "❌ Błąd: python3-venv nie jest dostępny"
    echo "💡 To nie powinno się zdarzyć - zależności powinny być zainstalowane automatycznie"
    exit 1
fi

if ! python3 -c "import tkinter" 2>/dev/null; then
    echo "❌ Błąd: python3-tk nie jest dostępny"
    echo "💡 To nie powinno się zdarzyć - zależności powinny być zainstalowane automatycznie"
    exit 1
fi

if ! command -v ffmpeg >/dev/null 2>&1; then
    echo "⚠️ FFmpeg nie jest dostępny"
    echo "🔄 Instalowanie FFmpeg w tle..."
    
    # Stwórz skrypt instalacji FFmpeg i uruchom w tle
    cat > /tmp/install-ffmpeg-yt-downloader.sh << 'EOF'
#!/bin/bash
sleep 5  # Poczekaj na zakończenie dpkg
echo "🔄 Automatyczna instalacja FFmpeg..." | logger -t youtube-downloader
export DEBIAN_FRONTEND=noninteractive
if apt-get update -qq && apt-get install -y -qq ffmpeg >/dev/null 2>&1; then
    echo "✅ FFmpeg zainstalowany pomyślnie" | logger -t youtube-downloader
    echo "✅ FFmpeg zainstalowany! YouTube Downloader ma pełną funkcjonalność" | wall 2>/dev/null || true
else
    echo "❌ Instalacja FFmpeg nieudana" | logger -t youtube-downloader
    echo "💡 Zainstaluj ręcznie: sudo apt install ffmpeg" | wall 2>/dev/null || true
fi
rm -f /tmp/install-ffmpeg-yt-downloader.sh
EOF
    chmod +x /tmp/install-ffmpeg-yt-downloader.sh
    nohup /tmp/install-ffmpeg-yt-downloader.sh >/dev/null 2>&1 &
    
    echo "⚠️ FFmpeg będzie zainstalowany w tle za kilka sekund"
    echo "💡 Aplikacja będzie działać, ale bez konwersji MP3 do czasu instalacji FFmpeg"
else
    echo "✅ FFmpeg już jest dostępny"
fi

echo "✅ Wszystkie zależności są dostępne"

# Utwórz środowisko wirtualne z lepszą obsługą błędów
echo "🔧 Tworzenie środowiska wirtualnego..."

# Sprawdź czy venv już istnieje i jest prawidłowy (np. z poprzedniej instalacji)
if [ -d "/usr/share/youtube-downloader/venv" ] && [ -f "/usr/share/youtube-downloader/venv/bin/activate" ]; then
    echo "📦 Znaleziono istniejące środowisko wirtualne"
    if /usr/share/youtube-downloader/venv/bin/python -c "import sys; print(sys.version)" >/dev/null 2>&1; then
        echo "✅ Istniejące środowisko wirtualne jest prawidłowe"
        VENV_EXISTS=true
    else
        echo "⚠️ Istniejące środowisko wirtualne jest uszkodzone, tworzę nowe..."
        rm -rf /usr/share/youtube-downloader/venv 2>/dev/null || true
        VENV_EXISTS=false
    fi
else
    VENV_EXISTS=false
fi

# Twórz venv tylko jeśli nie istnieje lub jest uszkodzony
if [ "$VENV_EXISTS" = "false" ]; then
    # Próbuj standardową metodę
    if python3 -m venv /usr/share/youtube-downloader/venv 2>/dev/null; then
        echo "✅ Środowisko wirtualne utworzone pomyślnie"
    else
        echo "❌ Błąd: Nie udało się utworzyć środowiska wirtualnego"
        echo "Próbuję alternatywną metodę..."
    
    # Usuń uszkodzone venv jeśli istnieje
    rm -rf /usr/share/youtube-downloader/venv 2>/dev/null || true
    
    # Próbuj z --without-pip
    if python3 -m venv --without-pip /usr/share/youtube-downloader/venv 2>/dev/null; then
        echo "✅ Środowisko wirtualne utworzone bez pip"
        # Zainstaluj pip w venv przez bezpieczny curl
        install_pip_secure "/usr/share/youtube-downloader/venv/bin/python"
    else
        echo "❌ Błąd: Nie udało się utworzyć środowiska wirtualnego"
        echo "Próbuję ręczną metodę..."
        
        # Ręczne utworzenie venv
        mkdir -p /usr/share/youtube-downloader/venv/bin
        mkdir -p /usr/share/youtube-downloader/venv/lib/python3.*/site-packages
        mkdir -p /usr/share/youtube-downloader/venv/include
        
        # Skopiuj Python do venv
        cp $(which python3) /usr/share/youtube-downloader/venv/bin/python
        cp $(which python3) /usr/share/youtube-downloader/venv/bin/python3
        
        # Utwórz activate script
        cat > /usr/share/youtube-downloader/venv/bin/activate << 'EOF'
#!/bin/bash
export VIRTUAL_ENV="/usr/share/youtube-downloader/venv"
export PATH="$VIRTUAL_ENV/bin:$PATH"
unset PYTHONHOME
EOF
        chmod +x /usr/share/youtube-downloader/venv/bin/activate
        
        # Zainstaluj pip przez bezpieczny curl
        install_pip_secure "/usr/share/youtube-downloader/venv/bin/python"
    fi
    fi
fi

# Sprawdź czy venv został utworzony poprawnie
if [ ! -d "/usr/share/youtube-downloader/venv" ] || [ ! -f "/usr/share/youtube-downloader/venv/bin/activate" ]; then
    echo "❌ Błąd krytyczny: Środowisko wirtualne nie zostało utworzone"
    echo "Próbuję ponownie utworzyć środowisko wirtualne..."
    
    # Usuń uszkodzone venv jeśli istnieje
    rm -rf /usr/share/youtube-downloader/venv 2>/dev/null || true
    
    # Spróbuj ponownie utworzyć venv
    if python3 -m venv /usr/share/youtube-downloader/venv 2>/dev/null; then
        echo "✅ Środowisko wirtualne utworzone ponownie"
    else
        echo "❌ Nie udało się utworzyć środowiska wirtualnego"
        echo "Aplikacja może nie działać poprawnie"
        echo "Spróbuj ponownie za kilka minut po zakończeniu instalacji zależności"
    fi
fi

# Zainstaluj zależności w środowisku wirtualnym
echo "📚 Instalowanie zależności w środowisku wirtualnym..."
if /usr/share/youtube-downloader/venv/bin/pip install "yt-dlp>=2025.7.21" 2>/dev/null; then
    echo "✅ Zależności zainstalowane pomyślnie"
else
    echo "❌ Błąd: Nie udało się zainstalować zależności"
    echo "Próbuję ponownie..."
    /usr/share/youtube-downloader/venv/bin/pip install --upgrade pip
    if /usr/share/youtube-downloader/venv/bin/pip install "yt-dlp>=2025.7.21" 2>/dev/null; then
        echo "✅ Zależności zainstalowane pomyślnie"
    else
        echo "❌ Błąd: Nie udało się zainstalować zależności"
        echo "Aplikacja może nie działać poprawnie"
    fi
fi

# Sprawdź czy zależności zostały zainstalowane poprawnie
echo "🔍 Sprawdzanie instalacji zależności..."
if /usr/share/youtube-downloader/venv/bin/python -c "import yt_dlp" 2>/dev/null; then
    echo "✅ Zależności działają poprawnie"
else
    echo "❌ Błąd: Zależności nie działają poprawnie"
    echo "🔄 Próbuje ponownie zainstalować yt-dlp..."
    if /usr/share/youtube-downloader/venv/bin/pip install "yt-dlp>=2025.7.21"; then
        echo "✅ yt-dlp zainstalowany ponownie"
    else
        echo "❌ Nie udało się zainstalować yt-dlp"
        echo "💡 Spróbuj ręcznie: /usr/share/youtube-downloader/venv/bin/pip install yt-dlp"
    fi
fi

# Aktualizuj ikony i desktop
if command -v update-icon-caches >/dev/null 2>&1; then
    update-icon-caches /usr/share/icons/hicolor
fi

if command -v update-desktop-database >/dev/null 2>&1; then
    update-desktop-database /usr/share/applications
fi

# Konfiguracja i logi będą zapisywane w /tmp/ (zawsze dostępny)
echo "📝 Konfiguracja i logi będą zapisywane w /tmp/"
echo "🔄 Dane będą dostępne do restartu systemu"

# Utwórz katalog logów użytkownika (dla kompatybilności)
if [ -n "$SUDO_USER" ]; then
    USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
else
    USER_HOME=$HOME
fi

if [ -n "$USER_HOME" ] && [ -d "$USER_HOME" ]; then
    mkdir -p "$USER_HOME/.youtube-downloader" || true
fi

# Ustaw uprawnienia tylko jeśli pliki istnieją
if [ -f "/usr/bin/youtube-downloader" ]; then
    chmod 755 /usr/bin/youtube-downloader || true
else
    echo "⚠️ Ostrzeżenie: /usr/bin/youtube-downloader nie istnieje"
fi

if [ -f "/usr/share/applications/youtube-downloader.desktop" ]; then
    chmod 644 /usr/share/applications/youtube-downloader.desktop || true
else
    echo "⚠️ Ostrzeżenie: youtube-downloader.desktop nie istnieje"
fi

echo "✅ YouTube Downloader v1.0.3 został zainstalowany pomyślnie!"
echo "🚀 Uruchom aplikację komendą: youtube-downloader"
echo "📱 Lub znajdź w menu aplikacji systemu"
echo "📝 Logi będą zapisywane w: ~/.youtube-downloader/youtube_downloader.log"
echo ""
echo "🔄 Instalacja zakończona"
echo ""
echo "⚠️  UWAGA PRAWNA: Ta aplikacja jest narzędziem technicznym."
echo "Użytkownik odpowiada za legalność pobierania treści."
